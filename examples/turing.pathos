//To show that Pathos is Turing-complete.
//This is a general-purpose UTM emulator, run for example on a copy subroutine that I found on Wikipedia.

//I log the memory tape and the current machine state as I go along.

((((lambda (lookup first get last)
      ((lambda (f) (f f))
        (lambda (g)
          (lambda (state tuples pos neg)
            (if (= state 0) (quote neg pos)
              (log (quote state (quote neg pos)) ((lambda (tuple)
                ((g g)
                  (get tuple 4)
                  tuples
                  ((lambda (x)
                    (if (= x 1) (if (empty pos) pos (cdr pos))
                      (if (= x -1) (cons (last neg) (cons (get tuple 2) (if (empty pos) pos (cdr pos))))
                        (cons (get tuple 2) (if (empty pos) pos (cdr pos)))))) (get tuple 3))
                  ((lambda (x)
                    (if (= x -1) (if (empty neg) neg (first neg))
                      (if (= x 1) (append (get tuple 2) neg)
                        neg))) (get tuple 3))))
                  (lookup state (if (empty pos) #f (car pos)) tuples))))))))
    
    //lookup:
    ((lambda (and)
      ((lambda (f) (f f))
      (lambda (g)
        (lambda (state mem tuples)
          (if (and (= state (car (car tuples))) (= mem (car (cdr (car tuples))))) (car tuples)
            ((g g) state mem (cdr tuples)))))))
      (lambda (a b) (if a (if b #t #f) #f)))
    
    //first:
    ((lambda (f) (f f))
    (lambda (g)
      (lambda (l)
        (if (empty (cdr l)) (quote)
          (cons (car l) ((g g) (cdr l)))))))
    
    //get:
    ((lambda (helper)
      (lambda (list index) (helper list index 0)))
    ((lambda (f) (f f))
    (lambda (g)
      (lambda (list index current)
        (if (= index current) (car list)
          ((g g) (cdr list) index (+ current 1)))))))

    //last:
    ((lambda (f) (f f))
    (lambda (g)
      (lambda (l)
        (if (empty (cdr l)) (car l)
          ((g g) (cdr l)))))))

  1
  
  //Wikipedia's copy subroutine that appears to work:
  (quote
    (quote 1 #f #f 0 0)
    (quote 1 #t #f 1 2)
    (quote 2 #f #f 1 3)
    (quote 2 #t #t 1 2)
    (quote 3 #f #t -1 4)
    (quote 3 #t #t 1 3)
    (quote 4 #f #f -1 5)
    (quote 4 #t #t -1 4)
    (quote 5 #f #t 1 1)
    (quote 5 #t #t -1 5)
  )

  //Example starting memory:
  (quote #t #t #t)
  (quote)
)

